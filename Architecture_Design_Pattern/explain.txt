No, **architecture patterns** and **design patterns** are not the same thing, though they are closely related. They both deal with solving problems in software development, but they operate at different levels of abstraction and scope.

### 1. **Architecture Patterns**:
   - **Level**: High-level structure of an entire system or application.
   - **Scope**: Deals with the overall system architecture and its components.
   - **Purpose**: Provides a blueprint for how the different parts of a system should interact and be organized to achieve the system's objectives.
   - **Focus**: Concerned with the **big picture**, such as how to structure services, data flow, communication, and scalability.
   - **Examples**:
     - **Layered Architecture**: Organizing an application into different layers (e.g., presentation, business logic, data access).
     - **Microservices Architecture**: Organizing an application into loosely coupled, independently deployable services.
     - **Event-Driven Architecture**: Based on event processing where components react to events.
     - **Client-Server Architecture**: The system is divided into clients that request services and servers that provide them.

### 2. **Design Patterns**:
   - **Level**: More focused on specific solutions within smaller scopes (e.g., within a single component or class).
   - **Scope**: Deals with the design of individual components or the interaction between specific classes or objects.
   - **Purpose**: Provides reusable solutions for common software design problems in a specific context.
   - **Focus**: Concerned with specific issues like object creation, behavior, or interactions between objects.
   - **Examples**:
     - **Singleton Pattern**: Ensures a class has only one instance and provides a global point of access to it.
     - **Observer Pattern**: Allows objects to be notified when a state change occurs in another object.
     - **Factory Method Pattern**: Defines an interface for creating an object, but allows subclasses to alter the type of objects that will be created.
     - **Strategy Pattern**: Defines a family of algorithms and makes them interchangeable without altering the client code.

### Key Differences:
| Aspect                    | **Architecture Pattern**                           | **Design Pattern**                          |
|---------------------------|----------------------------------------------------|---------------------------------------------|
| **Scope**                  | Large-scale, overall system design.               | Focuses on specific components or classes.  |
| **Level of Abstraction**   | High-level abstraction of system components.      | Low-level, dealing with specific solutions. |
| **Focus**                  | Organization of system components and their interaction. | Solution to specific software design issues. |
| **Examples**               | Microservices, Layered Architecture, Client-Server | Singleton, Factory, Observer, Strategy     |
| **Use**                    | Guides the structure of the entire system.        | Provides reusable solutions for coding problems. |

### How They Complement Each Other:
- **Architecture patterns** provide the overall structure or blueprint for the system, while **design patterns** offer solutions to specific challenges that arise within that structure.
- For example, in a **Microservices Architecture**, design patterns like **Singleton** (to manage shared instances) or **Factory Method** (for creating services) could be applied within the individual microservices.

### Summary:
- **Architecture patterns** define the structure of entire systems or large-scale components.
- **Design patterns** are reusable solutions to common problems within specific parts of a system, often at the class or object level.
- While different, both play a critical role in building well-structured, maintainable, and scalable systems.