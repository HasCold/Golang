In Golang, there are several ways to wait for goroutines to complete their execution. Below are the most common methods:

---

### 1. **Using `sync.WaitGroup`**

The `sync.WaitGroup` is a built-in synchronization primitive used to wait for a collection of goroutines to finish.

#### Example:
```go
package main

import (
	"fmt"
	"sync"
)

func worker(id int, wg *sync.WaitGroup) {
	defer wg.Done() // Mark this goroutine as done when it finishes
	fmt.Printf("Worker %d starting\n", id)
	// Simulate work
	fmt.Printf("Worker %d done\n", id)
}

func main() {
	var wg sync.WaitGroup

	for i := 1; i <= 3; i++ {
		wg.Add(1) // Increment the counter for each goroutine
		go worker(i, &wg)
	}

	wg.Wait() // Wait for all goroutines to finish
	fmt.Println("All workers finished")
}
```

---

### 2. **Using Channels**

Channels can be used to signal the main goroutine when a worker has completed its task.

#### Example:
```go
package main

import (
	"fmt"
	"time"
)

func worker(id int, done chan bool) {
	fmt.Printf("Worker %d starting\n", id)
	time.Sleep(2 * time.Second) // Simulate work
	fmt.Printf("Worker %d done\n", id)
	done <- true // Signal that this worker is done
}

func main() {
	done := make(chan bool, 3) // Buffered channel to hold signals

	for i := 1; i <= 3; i++ {
		go worker(i, done)
	}

	for i := 1; i <= 3; i++ {
		<-done // Wait for a signal from each goroutine
	}

	fmt.Println("All workers finished")
}
```

---

### 3. **Using Context with `context.Context`**

The `context` package can be used to manage the lifecycle of goroutines and wait for them to complete by signaling their cancellation.

#### Example:
```go
package main

import (
	"context"
	"fmt"
	"time"
)

func worker(ctx context.Context, id int) {
	for {
		select {
		case <-ctx.Done(): // Listen for cancellation signal
			fmt.Printf("Worker %d exiting\n", id)
			return
		default:
			fmt.Printf("Worker %d working\n", id)
			time.Sleep(1 * time.Second)
		}
	}
}

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel() // Cancel when the main function exits

	for i := 1; i <= 3; i++ {
		go worker(ctx, i)
	}

	time.Sleep(5 * time.Second) // Wait to observe the behavior
	fmt.Println("Main function done")
}
```

---

### 4. **Using `sync.Mutex` and Shared State**

This is a less common approach but can be used if goroutines modify a shared state, and the main goroutine waits for a certain condition to be met.

#### Example:
```go
package main

import (
	"fmt"
	"sync"
)

func worker(id int, wg *sync.WaitGroup, mu *sync.Mutex, count *int) {
	defer wg.Done()
	mu.Lock()
	*count += 1
	fmt.Printf("Worker %d incremented count to %d\n", id, *count)
	mu.Unlock()
}

func main() {
	var wg sync.WaitGroup
	var mu sync.Mutex
	count := 0

	for i := 1; i <= 3; i++ {
		wg.Add(1)
		go worker(i, &wg, &mu, &count)
	}

	wg.Wait()
	fmt.Printf("Final count: %d\n", count)
}
```

---

### 5. **Using Timer or Sleep**

Although not a direct way to wait for specific goroutines, you can use `time.Sleep` or `time.After` to delay execution and allow goroutines to complete.

#### Example:
```go
package main

import (
	"fmt"
	"time"
)

func worker(id int) {
	fmt.Printf("Worker %d starting\n", id)
	time.Sleep(2 * time.Second) // Simulate work
	fmt.Printf("Worker %d done\n", id)
}

func main() {
	go worker(1)
	go worker(2)

	time.Sleep(3 * time.Second) // Wait for enough time to let goroutines complete
	fmt.Println("All workers finished")
}
```

---

### 6. **Using Select with Channels**

A `select` statement can be used to wait for multiple channels to signal completion.

#### Example:
```go
package main

import (
	"fmt"
	"time"
)

func worker(id int, done chan int) {
	fmt.Printf("Worker %d starting\n", id)
	time.Sleep(2 * time.Second)
	fmt.Printf("Worker %d done\n", id)
	done <- id
}

func main() {
	done := make(chan int, 3)

	for i := 1; i <= 3; i++ {
		go worker(i, done)
	}

	for i := 1; i <= 3; i++ {
		select {
		case id := <-done:
			fmt.Printf("Received signal from worker %d\n", id)
		}
	}

	fmt.Println("All workers finished")
}
```

---

### Comparison of Methods
| **Method**             | **Best For**                                           |
|-------------------------|-------------------------------------------------------|
| `sync.WaitGroup`        | Managing multiple goroutines with a simple API        |
| Channels               | Waiting for specific signals from workers             |
| `context.Context`      | Managing goroutines with cancellation or timeouts     |
| `sync.Mutex`           | Managing shared state with thread-safe operations     |
| Timer/Sleep            | Quick and dirty waiting (not recommended in most cases)|
| Select with Channels   | Handling dynamic or multiple signals from workers     |

Choose the method based on the complexity and requirements of your application!